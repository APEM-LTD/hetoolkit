% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/impute_flow.R
\name{impute_flow}
\alias{impute_flow}
\title{Impute missing flow data.}
\usage{
impute_flow(data, site_col = " flow_site_id", date_col = "date", flow_col = "flow", method = "linear", donor = NULL)
}
\arguments{
\item{data}{A tibble or data frame containing the flow data to be imputed. Include all sites, not just those with missing data, especially if using the equipercentile method.}

\item{site_col}{Name of column in \code{data} containing unique flow site id. Default = "flow_site_id". Site ids are coerced to a character vector.}

\item{date_col}{Name of column in \code{data} containing date of flow record. Default = "date".  Dates must be in "yyyy-mm-dd" format.}

\item{flow_col}{Name of column in \code{data} containing the measured  flows. Default = "flow".}

\item{method}{Imputation method: "linear" (default), "exponential" or "equipercentile".}

\item{donor}{– A tibble or data frame with at least two columns: the first a list of flow sites requiring imputation, and the second a list of paired donor sites. Subsequent columns are ignored. Default = NULL. Only used when method = "equipercentile".  Note, the date ranges of the donor site and the flow site of interest must overlap by a minimum of 365 records (i.e. 1 year).}
}
\value{
A tibble containing the imputed flow data. The data are arranged in long format, with the following columns:
\itemize{
\item flow_site_id (unique flow site id)
\item date (of flow record)
\item imputed (flag  indicating whether each flow value is original (0) or imputed (1))
\item donor_site (id of donor site used for imputation, if "equipercentile" method used)
\item donor_flow (measured flow at donor site on that date, if "equipercentile" method used)
\item any other columns in the input dataset are automatically pulled through and joined to the output data table (e.g. the ‘input’ and ‘quality’ columns from the import_flow() function).
}
}
\description{
This function imputes (infills) missing records in daily flow time series for one or more sites (gauging stations) using either interpolation or an equipercentile  method. Imputation of missing flow data can improve the later estimation of flow statistics using the calc_flowstats() function and aid the visualisation of hydro-ecological relationships using the plot_hev() function.  Note, although this function provides automated tools for imputing missing records, it is advisable to consult a hydrologist if your data contains extensive/lengthy gaps, to ensure that the methods and results are trustworthy.
}
\details{
This function is intended for imputing gauged daily flow data only; it cannot be used to impute sub-daily data, and is not designed for data on coarser time steps (e.g. 10-daily or monthly).

The function offers three imputation methods: linear interpolation, exponential interpolation and an equipercentile algorithm.

The default \code{linear} method uses linear (straight line) interpolation to impute missing flow values. It is therefore unable to infill gaps at the beginning or end of a time series (these flow values remain \code{NA}).

The \code{exponential} method assumes that flow changes exponentially with time, and so produces imputed values with an accelerating rate of change in flow on the rising limb of the hydrograph, and a decelerating rate of change on the descending limb. Specifically, the flow on day t (Qt) is a function of the flow on the previous day (Qt-1) and the exponential decay constant (λ): Qt = Qt-1 x e-λ. For example, a flow time series with a 3 day gap – \verb{10, NA, NA, NA, 6} – has an exponential decay constant λ = ln(10/6) / 4 = 0.1277. The interpolated value for day 2 is therefore 10 x e-0.1277 = 8.801, and the full interpolated time series is: \verb{10.000, 8.801, 7.746, 6.817, 6.000}. Like the \code{linear} method, however, it is unable to infill gaps at the beginning or end of a time series. Furthermore, the \code{exponential} method will fail if the flow value immediately before or after a gap is 0 (or negative).

The \code{equipercentile} method uses measured flows at a donor site to estimate missing flows at a target site. Specifically, the percentile value of the donor flow on any given day is assumed equal to the percentile value of the target flow. Gaps are infilled by calculating the donor flow percentile values and using the existing target flow data to derive the flow equivalent to this percentile value at the target site (for details see Hughes and Smakhtin 1996).

The donor site to be used for each target site can be specified by the user (via the \code{donors} argument). If \code{donors = NULL}, then the function finds the site in \code{data} whose flows are most strongly correlated (using Spearman’s rank correlation coefficient) with those at the target site, and uses that as the donor site. Note that this automated method does not guarantee that the donor site identified will be suitable; indeed, the donor site may be very unsuitable if none of the other sites are climatologically and hydrologically similar to the target site. To mitigate the risk of poor imputation, the function requires that paired target and donor sites have a minimum of 365 overlapping measured flow records. If this condition is not met and a donor site cannot be identified, then the function provides a warning message listing the sites affected.

The interpolation methods have the benefit of simplicity and typically perform best when used to infill relatively short gaps – i.e. intervals where it is reasonable to assume that flows are stable or changing linearly or exponentially over time. The equipercentile method can be better than interpolation at infilling longer gaps, during which flows may change abruptly in response to rainfall events, but its performance is critically dependent on the suitability of the donor site. Donor sites should be hydrologically similar to, and have flows which are strongly correlated with, the target site. If these conditions are not met, then the equipercentile method can produce very imprecise or biased imputed values. When a suitable donor site is used, the equipercentile method has been demonstrated to be superior to many other imputation techniques (including catchment area scaling, long-term mean scaling, and linear regression methods using a single donor site) and to perform similarly to multiple regression using two donor sites (Harvey et al. 2012).

The function applies just one, chosen method at a time, with no default to fall-back methods. If the first method fails to infill all the gaps, then the function can be run a second time, with a different chosen method, to try to infill the remaining gaps, and so on. This iterative approach provides flexibility to determine the sequence in which methods are applied.

The \code{linear} and \code{exponential} methods can be applied to a single site, but the \code{equipercentile} method requires a minimum of two sites (each site acting as a donor for the other).

When processing data for multiple sites, it is recommended that the sites have flow data that span a common time period. This is not essential, however, as the function identifies the earliest and latest dates (across all sites), and ‘expands’ the output dataset to cover all dates for all sites. If flow cannot be imputed for a certain date, then the flow value returned is \code{NA}.
}
\examples{

# simulate a year of daily flows for three sites
set.seed(3)
flow1 <- arima.sim(model = list(ar = 0.97), n = 365) + 20
flow2 <- flow1 + 3*sin(seq(0,2*pi,length.out=365))
flow3 <- flow1 + 3*cos(seq(0,2*pi,length.out=365))

# combine into a dataframe
flow_data <- data.frame(flow_site_id = rep(c("A", "B", "C"), each = 365),
                        date = seq(as.Date("2021-01-01"), as.Date("2021-12-31"), by = "1 day"),
                        flow = c(flow1, flow2, flow3),
                        stringsAsFactors=FALSE)

# plot data for January
flow_data \%>\%
  dplyr::filter(date >= "2021-01-01" & date <= "2021-01-31") \%>\%
  ggplot(aes(x = date, y = flow, group = flow_site_id, colour = flow_site_id)) +
  geom_line()

# create missing data for site A during January
flow_data$flow[11:20] <- NA

# impute flows using linear method
imp_lin <- impute_flow(data = flow_data,
                       site_col = "flow_site_id",
                       date_col = "date",
                       flow_col = "flow",
                       method = "linear")
imp_lin[1:31,]

# impute flows using exponential method
imp_exp <- impute_flow(data = flow_data,
                       site_col = "flow_site_id",
                       date_col = "date",
                       flow_col = "flow",
                       method = "exponential")
imp_exp[1:31,]

# impute flows for site A using automatically selected donor site (B)
imp_donorB <- impute_flow(data = flow_data,
                          site_col = "flow_site_id",
                          date_col = "date",
                          flow_col = "flow",
                          method = "equipercentile")
imp_donorB[1:31,]

# impute flows for site A using chosen donor site (C)
donors <- data.frame(site = c("A"), donor = c("C"), stringsAsFactors=FALSE)
imp_donorC <- impute_flow(data = flow_data,
                          site_col = "flow_site_id",
                          date_col = "date",
                          flow_col = "flow",
                          method = "equipercentile",
                          donor = donors)
imp_donorC[1:31,]

# combine four sets of imputation results
imp_all <- cbind(imp = rep(c("imp_lin", "imp_exp", "imp_donerB", "imp_donerC"), each = 365*3), rbind(imp_lin, imp_exp, imp_donorB[,c(1,2,3,6,7)], imp_donorC[,c(1,2,3,6,7)]))

# compare imputed values for site A
imp_all \%>\%
  dplyr::filter(flow_site_id == "A") \%>\%
  dplyr::filter(date >= "2021-01-01" & date <= "2021-01-31") \%>\%
  ggplot(aes(x = date, y = flow, group = imp, colour = imp)) +
  geom_line()

}
